
@{
    ViewBag.Title = "Orders";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Orders</h2>

<p>
    @Html.ActionLink("New", "New", "Orders", new { @class = "btn btn-primary" })
</p>

<table id="orders-table" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Orders</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody id="orders"></tbody>
</table>
<div class="ll"></div>
<div id="loading" class="loading-spinner ll" ></div>

@section scripts
{
    <script>
        $(document).ready(function () {

            $(document).ajaxStart(function () {
                $("#loading").css("display", "block");
            });
            $(document).ajaxComplete(function () {
                $("#loading").css("display", "none");
            });

            var table = $("#orders-table").DataTable({
                /* DataTables configuration object */
                type: "GET",
                sAjaxDataProp: "",   /* as API response is an array, this tells datatables to expect an array rather than an object */
                ajax: "/api/orders",
                dataSrc: "", /* API response for GET is an array, datatables doesn't have to specify where to get data from within the response as the data needed is the whole GET response */
                columns: [
                    {
                        data: "id",
                        render: function (data, type,  order) {
                            return "<a href='orders/viewOrder/" + order.id + "'>" + order.customer.name + "</a>";
                        }
                    },
                    {
                        data: "id",
                        render: function (data, type, order) {
                            return "<button data-order-id=" + order.id + " class='btn-link js-delete'>Delete</button>";
                        }
                    }
                ]
            });

            $("#orders-table").on("click", ".js-delete", function () {

                var $button = $(this);
                var $orderId = ($button).attr("data-order-id");

                // bootbox plugin
                bootbox.confirm("Are you sure you want to delete this order?", function (result) {
                    if (result) {
                        $.ajax({
                            type: "DELETE",
                            url: "/api/orders/" + $($button).attr("data-order-id"), /* the Id is retrieved as it was stored in the HTML element during the GET request (see above code) */
                            // code to execute before the ajax request starts
                            beforeSend: function () {
                                getProductsToDelete($orderId);
                            }
                        })
                            .done(function () {
                                // deletes the corresponding book from the internal list maintained by datatables
                                table.row($button.parents("tr")).remove().draw();
                            })

                            .fail(function () {
                                alert("There was an error processing the request");
                            });
                    }
                });
            });

            // in order to update the product quantities after an order is deleted
            // it is necessary to first retrieve the required products
            // function: gets the required products
            function getProductsToDelete(orderId) {
                $.ajax({
                    type: "GET",
                    url: "/api/orderdetails"
                })
                    .done(function (data) {
                        // stores the products ids of the products that need to be updated
                        var products = {
                            productIds: []
                        };
                        // get each product associated with the order
                        $.each(data, function (key, value) {
                            if (value.orderId == orderId) {
                                products.productIds.push(value.productId);
                            }
                        });
                        // calls function to update product quantities
                        updateQuantity(products);
                    })
                    .fail(function () {
                        alert("There was an error processing the request");
                    })
            }

            // updates the quantities of the products that are being deleted
            // by making a post request to update the product quantity values stored in the db
            function updateQuantity(products) {
                $.ajax({
                    type: "POST",
                    url: "/api/productsquantity",
                    data: products
                })
                    .done(function (data) {
                        data = {};
                    })
                    .fail(function () {
                        alert("There was an error processing the request");
                    });
            }
        });
    </script>
}